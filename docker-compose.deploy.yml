version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  web:
    build: .
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - PYTHONPATH=/app/backend
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/hoteltracker
      - REDIS_URL=redis://redis:6379/0
      - REDIS_CACHE_URL=redis://redis-cache:6379/1
    env_file:
      - production.env
    depends_on:
      - db
      - redis
      - redis-cache
    expose:
      - "8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging: *default-logging

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hoteltracker
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    logging: *default-logging

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    logging: *default-logging

  redis-cache:
    image: redis:7-alpine
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_cache_data:/data
    ports:
      - "6380:6379"
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 384M
        reservations:
          cpus: '0.10'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging: *default-logging

  celery:
    build: .
    command: celery -A backend.tasks worker --loglevel=info
    environment:
      - PYTHONPATH=/app/backend
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/hoteltracker
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - production.env
    depends_on:
      - web
      - redis
      - db
    volumes:
      - ./:/app
    restart: unless-stopped
    logging: *default-logging

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./.htpasswd:/etc/nginx/.htpasswd:ro
      - ./static:/app/static:ro
    depends_on:
      - web
    restart: always
    logging: *default-logging

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    logging: *default-logging

  grafana:
    image: grafana/grafana
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    logging: *default-logging

  alertmanager:
    image: prom/alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    restart: unless-stopped
    logging: *default-logging

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    logging: *default-logging

  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - BACKUP_BUCKET=${BACKUP_BUCKET}
    volumes:
      - ./backup:/backup
      - postgres_data:/var/lib/postgresql/data:ro
    depends_on:
      - db
    restart: unless-stopped
    logging: *default-logging

  analytics:
    build: .
    command: python -m backend.analytics.worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/hoteltracker
      - REDIS_URL=redis://redis:6379/0
      - MODEL_PATH=/app/models
    volumes:
      - ./models:/app/models
    depends_on:
      - db
      - redis
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backup_data:
  redis_cache_data:
  elasticsearch_data:
