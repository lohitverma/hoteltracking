version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  web:
    build: .
    image: ${ECR_REGISTRY}/hoteltracker-web:${IMAGE_TAG}
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/hoteltracker
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./:/app
    restart: unless-stopped
    logging: *default-logging
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hoteltracker
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    logging: *default-logging
    deploy:
      placement:
        constraints: [node.role == manager]

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    logging: *default-logging

  celery:
    build: .
    image: ${ECR_REGISTRY}/hoteltracker-celery:${IMAGE_TAG}
    command: celery -A backend.tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/hoteltracker
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - web
      - redis
      - db
    volumes:
      - ./:/app
    restart: unless-stopped
    logging: *default-logging
    deploy:
      replicas: 2

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./static:/app/static:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
    restart: unless-stopped
    logging: *default-logging

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    logging: *default-logging

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    logging: *default-logging

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    logging: *default-logging

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: unless-stopped
    logging: *default-logging

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@db:5432/hoteltracker?sslmode=disable
    restart: unless-stopped
    logging: *default-logging

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter
    command: -nginx.scrape-uri=http://nginx:80/metrics
    restart: unless-stopped
    logging: *default-logging

  backup:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hoteltracker
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
    entrypoint: |
      /bin/sh -c '
        while true; do
          DATE=$$(date +%Y%m%d_%H%M%S)
          pg_dump -h db -U postgres hoteltracker > /backups/backup_$$DATE.sql
          aws s3 cp /backups/backup_$$DATE.sql s3://${BACKUP_S3_BUCKET}/
          find /backups -type f -mtime +7 -delete
          sleep 86400
        done
      '
    restart: unless-stopped
    logging: *default-logging

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
